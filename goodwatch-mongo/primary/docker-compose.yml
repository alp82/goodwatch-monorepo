version: "3.8"

services:
  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo:8
    network_mode: "host"
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASS}
      - MONGO_INITDB_DATABASE=goodwatch
    extra_hosts:
      - "mongo:10.0.0.17"
    ports:
      - "28017:28017"
    volumes:
      - mongodb:/data/db
      - ./mongodb-keyfile:/data/mongodb-keyfile
    healthcheck:
      test: ["CMD-SHELL", "mongosh --port 28017 --eval 'db.runCommand(\"ping\").ok' --quiet"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    command: >
      --replSet rs0 
      --bind_ip_all 
      --port 28017 
      --keyFile /data/mongodb-keyfile 

  mongoinit:
    container_name: mongoinit
    image: mongo:8
    network_mode: "host"
    restart: no
    depends_on:
      mongo:
        condition: service_healthy
    command: >
      bash -c '
        # Step 1: Wait for the local mongod to be ready.
        echo "Waiting for mongo to be ready at localhost:28017..."
        until mongosh --host localhost --port 28017 --eval "db.adminCommand(\"ping\")"; do
          sleep 2
        done
      
        # Step 2: Initiate a single-node replica set so it can elect itself primary.
        # The user & password are used here to create the initial root user for the replica set.
        echo "Mongo is ready. Initiating a single-node replica set..."
        mongosh --host localhost --port 28017 -u $$MONGO_ADMIN_PASS -p $$MONGO_ADMIN_PASS --authenticationDatabase admin --eval ''
          rs.initiate({
            _id: "rs0",
            members: [{ _id: 0, host: "10.0.0.17:28017" }]
          });
        ''
      
        # Step 3: Wait for this node to become PRIMARY.
        echo "Waiting for node to become PRIMARY..."
        until mongosh --host localhost --port 28017 -u $$MONGO_ADMIN_PASS -p $$MONGO_ADMIN_PASS --authenticationDatabase admin --eval "rs.isMaster().ismaster" | grep -q "true"; do
            echo "Still waiting..."
            sleep 2
        done
      
        # Step 4: Add the other nodes to the replica set.
        echo "Node is PRIMARY. Adding secondary members..."
        mongosh --host localhost --port 28017 -u $$MONGO_ADMIN_PASS -p $$MONGO_ADMIN_PASS --authenticationDatabase admin --eval ''
          rs.add("10.0.0.18:28017");
          rs.add("10.0.0.19:28017");
        ''
      
        # Step 5: Create the goodwatch user.
        # We do this last, when the replica set is fully configured.
        echo "Creating application user..."
        mongosh --host localhost --port 28017 -u $$MONGO_ADMIN_PASS -p $$MONGO_ADMIN_PASS --authenticationDatabase admin --eval ''
          db.getSiblingDB("goodwatch").createUser({
            user: "goodwatch",
            pwd: process.env.MONGO_GOODWATCH_PASS,
            roles: [
              { role: "readWrite", db: "goodwatch" },
              { role: "dbAdmin", db: "goodwatch" }
            ]
          });
        ''
      
        echo "SUCCESS! Replica set is configured and user is created."
      '

volumes:
  mongodb:
