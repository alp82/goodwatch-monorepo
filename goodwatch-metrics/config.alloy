logging {
  level  = "info"
  format = "logfmt"
}

// 1. Scrape the separate node_exporter container
prometheus.scrape "node" {
  targets = [
    {"__address__" = "node-exporter:9100"},
  ]
  // Forward raw scraped metrics to the relabel component's receiver
  forward_to = [prometheus.relabel.add_instance_label.receiver]
}

// 2. Relabel the scraped metrics before sending them
prometheus.relabel "add_instance_label" {
  // Forward relabeled metrics to the remote_write component's receiver
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]

  // Rule to add the 'instance' label using the value from the environment variable.
  // This rule uses __address__ (which always exists after scraping) as an anchor
  // to ensure the rule always runs, then replaces/adds the 'instance' label.
  rule {
    action       = "replace"
    source_labels = ["__address__"] // Anchor label, value doesn't matter here
    target_label = "instance"       // The label we want to create/set
    replacement  = env("VPS_INSTANCE_NAME") // The value for the instance label
  }

  // Optional Rule: Ensure job label is set correctly.
  // node_exporter usually provides job='node_exporter' or similar by default.
  // You could uncomment this if you want to force a specific job name like 'hetzner-vps/node'.
  // rule {
  //   action       = "replace"
  //   target_label = "job"
  //   replacement  = "hetzner-vps/node" // Force specific job name
  // }
}

// 3. Send relabeled metrics to Grafana Cloud Prometheus Remote Write endpoint.
prometheus.remote_write "grafana_cloud" {
  endpoint {
    url = env("GRAFANA_CLOUD_PROM_URL")
    basic_auth {
      username = env("GRAFANA_CLOUD_PROM_USER")
      password = env("GRAFANA_CLOUD_PROM_PASSWORD")
    }
  }
}